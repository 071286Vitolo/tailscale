// Copyright (c) 2020 Tailscale Inc & AUTHORS All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package stun_test

import (
	"bytes"
	"crypto/rand"
	"fmt"
	"log"
	"testing"

	"tailscale.com/stun"
)

func ExampleRequest() {
	var transactionID [12]byte
	if _, err := rand.Read(transactionID[:]); err != nil {
		log.Fatal(err)
	}

	req := stun.Request(transactionID)
	fmt.Printf("%x\n", req)
}

var responseTests = []struct {
	name     string
	data     []byte
	wantTID  []byte
	wantAddr []byte
	wantPort uint16
}{
	{
		name: "google-1",
		data: []byte{
			0x01, 0x01, 0x00, 0x0c, 0x21, 0x12, 0xa4, 0x42,
			0x23, 0x60, 0xb1, 0x1e, 0x3e, 0xc6, 0x8f, 0xfa,
			0x93, 0xe0, 0x80, 0x07, 0x00, 0x20, 0x00, 0x08,
			0x00, 0x01, 0xc7, 0x86, 0x69, 0x57, 0x85, 0x6f,
		},
		wantTID: []byte{
			0x23, 0x60, 0xb1, 0x1e, 0x3e, 0xc6, 0x8f, 0xfa,
			0x93, 0xe0, 0x80, 0x07,
		},
		wantAddr: []byte{72, 69, 33, 45},
		wantPort: uint16(59028),
	},
	{
		name: "google-2",
		data: []byte{
			0x01, 0x01, 0x00, 0x0c, 0x21, 0x12, 0xa4, 0x42,
			0xf9, 0xf1, 0x21, 0xcb, 0xde, 0x7d, 0x7c, 0x75,
			0x92, 0x3c, 0xe2, 0x71, 0x00, 0x20, 0x00, 0x08,
			0x00, 0x01, 0xc7, 0x87, 0x69, 0x57, 0x85, 0x6f,
		},
		wantTID: []byte{
			0xf9, 0xf1, 0x21, 0xcb, 0xde, 0x7d, 0x7c, 0x75,
			0x92, 0x3c, 0xe2, 0x71,
		},
		wantAddr: []byte{72, 69, 33, 45},
		wantPort: uint16(59029),
	},
	{
		name: "stun.sipgate.net:10000",
		data: []byte{
			0x01, 0x01, 0x00, 0x44, 0x21, 0x12, 0xa4, 0x42,
			0x48, 0x2e, 0xb6, 0x47, 0x15, 0xe8, 0xb2, 0x8e,
			0xae, 0xad, 0x64, 0x44, 0x00, 0x01, 0x00, 0x08,
			0x00, 0x01, 0xe4, 0xab, 0x48, 0x45, 0x21, 0x2d,
			0x00, 0x04, 0x00, 0x08, 0x00, 0x01, 0x27, 0x10,
			0xd9, 0x0a, 0x44, 0x98, 0x00, 0x05, 0x00, 0x08,
			0x00, 0x01, 0x27, 0x11, 0xd9, 0x74, 0x7a, 0x8a,
			0x80, 0x20, 0x00, 0x08, 0x00, 0x01, 0xc5, 0xb9,
			0x69, 0x57, 0x85, 0x6f, 0x80, 0x22, 0x00, 0x10,
			0x56, 0x6f, 0x76, 0x69, 0x64, 0x61, 0x2e, 0x6f,
			0x72, 0x67, 0x20, 0x30, 0x2e, 0x39, 0x36, 0x00,
		},
		wantTID: []byte{
			0x48, 0x2e, 0xb6, 0x47, 0x15, 0xe8, 0xb2, 0x8e,
			0xae, 0xad, 0x64, 0x44,
		},
		wantAddr: []byte{72, 69, 33, 45},
		wantPort: uint16(58539),
	},
	{
		name: "stun.powervoip.com:3478",
		data: []byte{
			0x01, 0x01, 0x00, 0x24, 0x21, 0x12, 0xa4, 0x42,
			0x7e, 0x57, 0x96, 0x68, 0x29, 0xf4, 0x44, 0x60,
			0x9d, 0x1d, 0xea, 0xa6, 0x00, 0x01, 0x00, 0x08,
			0x00, 0x01, 0xe9, 0xd3, 0x48, 0x45, 0x21, 0x2d,
			0x00, 0x04, 0x00, 0x08, 0x00, 0x01, 0x0d, 0x96,
			0x4d, 0x48, 0xa9, 0xd4, 0x00, 0x05, 0x00, 0x08,
			0x00, 0x01, 0x0d, 0x97, 0x4d, 0x48, 0xa9, 0xd5,
		},
		wantTID: []byte{
			0x7e, 0x57, 0x96, 0x68, 0x29, 0xf4, 0x44, 0x60,
			0x9d, 0x1d, 0xea, 0xa6,
		},
		wantAddr: []byte{72, 69, 33, 45},
		wantPort: uint16(59859),
	},
	{
		name: "in-process pion server",
		data: []byte{
			0x01, 0x01, 0x00, 0x24, 0x21, 0x12, 0xa4, 0x42,
			0xeb, 0xc2, 0xd3, 0x6e, 0xf4, 0x71, 0x21, 0x7c,
			0x4f, 0x3e, 0x30, 0x8e, 0x80, 0x22, 0x00, 0x0a,
			0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
			0x65, 0x72, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08,
			0x00, 0x01, 0xce, 0x66, 0x5e, 0x12, 0xa4, 0x43,
			0x80, 0x28, 0x00, 0x04, 0xb6, 0x99, 0xbb, 0x02,
			0x01, 0x01, 0x00, 0x24, 0x21, 0x12, 0xa4, 0x42,
		},
		wantTID: []byte{
			0xeb, 0xc2, 0xd3, 0x6e, 0xf4, 0x71, 0x21, 0x7c,
			0x4f, 0x3e, 0x30, 0x8e,
		},
		wantAddr: []byte{127, 0, 0, 1},
		wantPort: uint16(61300),
	},
}

func TestParseResponse(t *testing.T) {
	subtest := func(t *testing.T, i int) {
		test := responseTests[i]
		tID, addr, port, err := stun.ParseResponse(test.data)
		if err != nil {
			t.Fatal(err)
		}

		if !bytes.Equal(tID[:], test.wantTID) {
			t.Errorf("tid=%v, want %v", tID[:], test.wantTID)
		}
		if !bytes.Equal(addr, test.wantAddr) {
			t.Errorf("addr=%v, want %v", addr, test.wantAddr)
		}
		if port != test.wantPort {
			t.Errorf("port=%d, want %d", port, test.wantPort)
		}
	}
	for i, test := range responseTests {
		t.Run(test.name, func(t *testing.T) {
			subtest(t, i)
		})
	}
}
