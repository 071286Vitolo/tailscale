// Copyright (c) 2021 Tailscale Inc & AUTHORS All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by the following command; DO NOT EDIT.
//   tailscale.com/cmd/viewer -type NetworkMap

package netmap

import (
	"inet.af/netaddr"
	"tailscale.com/tailcfg"
	"tailscale.com/types/key"
	"tailscale.com/types/wgkey"
	"tailscale.com/wgengine/filter"
	"time"
)

// View makes a readonly view of NetworkMap.
func (src *NetworkMap) View() NetworkMapView {
	return NetworkMapView{src}
}

// NetworkMapView is a readonly view of NetworkMap.
type NetworkMapView struct{ ж *NetworkMap }

func (v NetworkMapView) Valid() bool                          { return v.ж != nil }
func (v NetworkMapView) SelfNode() tailcfg.NodeView           { return v.ж.SelfNode.View() }
func (v NetworkMapView) NodeKey() tailcfg.NodeKey             { return v.ж.NodeKey }
func (v NetworkMapView) PrivateKey() wgkey.Private            { return v.ж.PrivateKey }
func (v NetworkMapView) Expiry() time.Time                    { return v.ж.Expiry }
func (v NetworkMapView) Name() string                         { return v.ж.Name }
func (v NetworkMapView) Addresses() []netaddr.IPPrefix        { return v.ж.Addresses }
func (v NetworkMapView) LocalPort() uint16                    { return v.ж.LocalPort }
func (v NetworkMapView) MachineStatus() tailcfg.MachineStatus { return v.ж.MachineStatus }
func (v NetworkMapView) MachineKey() key.MachinePublic        { return v.ж.MachineKey }

type _NetworkMapView_Peers []*tailcfg.Node

func (s _NetworkMapView_Peers) Len() int                  { return len(s) }
func (s _NetworkMapView_Peers) At(i int) tailcfg.NodeView { return s[i].View() }
func (v NetworkMapView) Peers() interface {
	Len() int
	At(int) tailcfg.NodeView
} {
	return _NetworkMapView_Peers(v.ж.Peers)
}
func (v NetworkMapView) DNS() tailcfg.DNSConfigView     { return v.ж.DNS.View() }
func (v NetworkMapView) Hostinfo() tailcfg.HostinfoView { return v.ж.Hostinfo.View() }

type _NetworkMapView_PacketFilter []filter.Match

func (s _NetworkMapView_PacketFilter) Len() int                  { return len(s) }
func (s _NetworkMapView_PacketFilter) At(i int) filter.MatchView { return s[i].View() }
func (v NetworkMapView) PacketFilter() interface {
	Len() int
	At(int) filter.MatchView
} {
	return _NetworkMapView_PacketFilter(v.ж.PacketFilter)
}
func (v NetworkMapView) CollectServices() bool        { return v.ж.CollectServices }
func (v NetworkMapView) DERPMap() tailcfg.DERPMapView { return v.ж.DERPMap.View() }
func (v NetworkMapView) Debug() *tailcfg.Debug {
	ptr := v.ж.Debug
	if ptr == nil {
		return nil
	}
	cp := *ptr
	return &cp
}
func (v NetworkMapView) User() tailcfg.UserID { return v.ж.User }
func (v NetworkMapView) Domain() string       { return v.ж.Domain }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _NetworkMapViewNeedsRegeneration = NetworkMap(struct {
	SelfNode        *tailcfg.Node
	NodeKey         tailcfg.NodeKey
	PrivateKey      wgkey.Private
	Expiry          time.Time
	Name            string
	Addresses       []netaddr.IPPrefix
	LocalPort       uint16
	MachineStatus   tailcfg.MachineStatus
	MachineKey      key.MachinePublic
	Peers           []*tailcfg.Node
	DNS             tailcfg.DNSConfig
	Hostinfo        tailcfg.Hostinfo
	PacketFilter    []filter.Match
	CollectServices bool
	DERPMap         *tailcfg.DERPMap
	Debug           *tailcfg.Debug
	User            tailcfg.UserID
	Domain          string
	UserProfiles    map[tailcfg.UserID]tailcfg.UserProfile
}{})
